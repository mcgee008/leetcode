class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
        
class LinkedList:
    def __init__(self):
        self.head = None
        
    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node
        
    def display(self):
        current = self.head
        while current:
            print(current.data, end = " ->")
            current = current.next
        print("none")

def merge_linked_lists(list1, list2):
    merged_list = LinkedList()
    curr1 = list1.head
    curr2 = list2.head

    while curr1 is not None:
        merged_list.append(curr1.data)
        curr1 = curr1.next
    
    while curr2 is not None:
        merged_list.append(curr2.data)
        curr2 = curr2.next
    
    return merged_list

def sort_linked_list(linked_list):
    elements = []
    curr = linked_list.head
    while curr:
        elements.append(curr.data)
        curr = curr.next
    sorted_elements = sorted(elements)
    
    sorted_linked_list = LinkedList()
    for element in sorted_elements:
        sorted_linked_list.append(element)
    
    return sorted_linked_list

ml = [1,2,4]
ml2 = [1,3,4]

mll = LinkedList()
mll2 = LinkedList()
final_mll = LinkedList()

for item in ml:
    mll.append(item)
mll.display()

for item in ml2:
    mll2.append(item)
mll2.display()


final_mll = merge_linked_lists(mll, mll2)

final_mll = sort_linked_list(final_mll)

final_mll.display()

